        -:    0:Source:q4.c
        -:    0:Graph:q4.gcno
        -:    0:Data:q4.gcda
        -:    0:Runs:8
        -:    1:// C program for Dijkstra's single source shortest path
        -:    2:// algorithm. The program is for adjacency matrix
        -:    3:// representation of the graph
        -:    4:
        -:    5:#include <limits.h>
        -:    6:#include <stdbool.h>
        -:    7:#include <stdio.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:// Number of vertices in the graph
        -:   11:
        -:   12:// A utility function to find the vertex with minimum
        -:   13:// distance value, from the set of vertices not yet included
        -:   14:// in shortest path tree
        1:   15:int minDistance(int dist[], bool sptSet[], int V)
        -:   16:{
        -:   17:	// Initialize min value
        1:   18:	int min = INT_MAX, min_index;
        -:   19:
        3:   20:	for (int v = 0; v < V; v++)
        2:   21:		if (sptSet[v] == false && dist[v] <= min)
        1:   22:			min = dist[v], min_index = v;
        -:   23:
        1:   24:	return min_index;
        -:   25:}
        -:   26:
        -:   27:// A utility function to print the constructed distance
        -:   28:// array
        1:   29:void printSolution(int dist[], int V)
        -:   30:{
        1:   31:	printf("Vertex \t\t Distance from Source\n");
        3:   32:	for (int i = 0; i < V; i++)
        2:   33:		printf("%d \t\t\t\t %d\n", i, dist[i]);
        1:   34:}
        -:   35:
        -:   36:// Function that implements Dijkstra's single source
        -:   37:// shortest path algorithm for a graph represented using
        -:   38:// adjacency matrix representation
        1:   39:void dijkstra(int **graph, int src, int V)
        1:   40:{
        1:   41:	int dist[V]; // The output array. dist[i] will hold the
        -:   42:				 // shortest
        -:   43:	// distance from src to i
        -:   44:
        1:   45:	bool sptSet[V]; // sptSet[i] will be true if vertex i is
        -:   46:					// included in shortest
        -:   47:	// path tree or shortest distance from src to i is
        -:   48:	// finalized
        -:   49:
        -:   50:	// Initialize all distances as INFINITE and stpSet[] as
        -:   51:	// false
        3:   52:	for (int i = 0; i < V; i++)
        2:   53:		dist[i] = INT_MAX, sptSet[i] = false;
        -:   54:
        -:   55:	// Distance of source vertex from itself is always 0
        1:   56:	dist[src] = 0;
        -:   57:
        -:   58:	// Find shortest path for all vertices
        2:   59:	for (int count = 0; count < V - 1; count++)
        -:   60:	{
        -:   61:		// Pick the minimum distance vertex from the set of
        -:   62:		// vertices not yet processed. u is always equal to
        -:   63:		// src in the first iteration.
        1:   64:		int u = minDistance(dist, sptSet, V);
        -:   65:
        -:   66:		// Mark the picked vertex as processed
        1:   67:		sptSet[u] = true;
        -:   68:
        -:   69:		// Update dist value of the adjacent vertices of the
        -:   70:		// picked vertex.
        3:   71:		for (int v = 0; v < V; v++)
        -:   72:
        -:   73:			// Update dist[v] only if is not in sptSet,
        -:   74:			// there is an edge from u to v, and total
        -:   75:			// weight of path from src to v through u is
        -:   76:			// smaller than current value of dist[v]
        2:   77:			if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
        1:   78:				dist[v] = dist[u] + graph[u][v];
        -:   79:	}
        -:   80:
        -:   81:	// print the constructed distance array
        1:   82:	printSolution(dist, V);
        1:   83:}
        -:   84:
        5:   85:void free_all(int **graph, int V)
        -:   86:{
    62211:   87:	for (int i = 0; i < V; i++)
        -:   88:	{
    62206:   89:		free(graph[i]);
        -:   90:	}
        5:   91:	free(graph);
        5:   92:}
        -:   93:
        -:   94:// driver's code
        8:   95:int main()
        -:   96:{
        -:   97:	int V;
        -:   98:
        8:   99:	if (scanf("%d", &V) != 1)
        -:  100:	{
        1:  101:		printf("Invalid number of vertices\n");
        1:  102:		exit(1);
        -:  103:	}
        7:  104:	if (V < 0)
        -:  105:	{
        1:  106:		printf("Negative number of vertices\n");
        1:  107:		exit(1);
        -:  108:	}
        -:  109:
        6:  110:	int **graph = (int **)malloc(V * sizeof(int *));
        -:  111:
        6:  112:	if (graph == NULL)
        -:  113:	{
        1:  114:		printf("Memory didn't allocated\n");
        1:  115:		exit(1);
        -:  116:	}
        -:  117:
    62211:  118:	for (int i = 0; i < V; i++)
        -:  119:	{
    62207:  120:		graph[i] = (int *)malloc(sizeof(int) * V);
    62207:  121:		if (graph[i] == NULL)
        -:  122:		{
        1:  123:			printf("Memory not allocated\n");
        1:  124:			free_all(graph, i);
        1:  125:			exit(1);
        -:  126:		}
        -:  127:	}
        -:  128:
        8:  129:	for (int i = 0; i < V; i++)
        -:  130:	{
       20:  131:		for (int j = 0; j < V; j++)
        -:  132:
        -:  133:		{
       16:  134:			if (scanf("%d", &graph[i][j]) != 1)
        -:  135:			{
        1:  136:				printf("Invalid input!\n");
        1:  137:				free_all(graph, V);
        1:  138:				exit(1);
        -:  139:			}
        -:  140:
       15:  141:			if (i == j && graph[i][j] != 0)
        -:  142:			{
        1:  143:				printf("No 0 on diagonal\n");
        1:  144:				free_all(graph, V);
        1:  145:				exit(1);
        -:  146:			}
       14:  147:			if (graph[i][j] < 0)
        -:  148:			{
        1:  149:				printf("Negative value\n");
        1:  150:				free_all(graph, V);
        1:  151:				exit(1);
        -:  152:			}
        -:  153:		}
        -:  154:	}
        -:  155:
        -:  156:	// Function call
        -:  157:
        1:  158:	dijkstra(graph, 0, V);
        1:  159:	free_all(graph, V);
        1:  160:	return 0;
        -:  161:}
